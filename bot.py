import re
import time
import telebot
from telebot import types

authorized_users = []

userState = {}  # so they won't reset every time the bot restarts

bot = telebot.TeleBot("zzz")

hideBoard = types.ReplyKeyboardRemove()  # if sent as reply_markup, will hide the keyboard

commands = {  # command description used in the "help" command
    'start': '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É',
    'help': '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö',
    'promo': '–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–∫—Ü–∏–∏ –Ω–∞ –∑–∞—Ä–∞–Ω–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–æ–≤',
    'presence': '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É',
    'price': '–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞',
    'orders': '–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏—à–µ–¥—à–∏–µ –∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è',
    'bossapp': '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å Prom –ø–æ –ø—Ä–∞–π—Å—É –∏–∑ Boss-app',
    'good': '–Ø —É–º–µ—é –¥–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à–æ'
}


def dump(obj):
    for attr in dir(obj):
        print("obj.%s = %r" % (attr, getattr(obj, attr)))


def get_user_step(message):
    cid = message.chat.id
    user_id = message.json['from']['id']
    user_hash = str(cid) + str(user_id)

    if user_hash in userState:
        return userState[user_hash]['action'], userState[user_hash]['step']
    else:
        reset_user_state(user_hash)
        print("New user detected, who hasn't used \"/start\" yet: " + user_hash)
        return 'None', 0


def authorize_user_action(cid, user_id, action):
    if user_id not in authorized_users:
        bot.send_message(cid, "–¢—ã –∫—Ç–æ —Ç–∞–∫–æ–π?")
        return False

    user_hash = str(cid) + str(user_id)

    if user_hash not in userState:
        reset_user_state(user_hash)
    elif action != userState[user_hash]['action']:
        reset_user_state(user_hash)
        # userState[user_hash]['action'] = action

    return True


def reset_user_state(user_hash):
    userState[user_hash] = {}
    userState[user_hash] = {
        'action': 'None',
        'step': 0,
        'user_input': 'None'
    }


# only used for console output now
def listener(messages):
    """
    When new messages arrive TeleBot will call this function.
    """
    for m in messages:
        if m.content_type == 'text':
            # print the sent message to the console
            print(str(m.chat.first_name) + " [" + str(m.chat.id) + "]: " + m.text)


def get_product_code(text):
    product_code = text.upper()

    # [TODO] validate

    return product_code


# handle the "/start" command
@bot.message_handler(commands=['start'])
def command_start(message):
    cid = message.chat.id
    user_id = message.json['from']['id']
    if not authorize_user_action(cid, user_id, 'start'):
        return

    command_help(message)
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    itembtn1 = types.KeyboardButton('/–ó–∞–ø—É—Å—Ç–∏—Ç—å_–∞–∫—Ü–∏–∏')
    itembtn2 = types.KeyboardButton('/–ò–∑–º–µ–Ω–∏—Ç—å_–Ω–∞–ª–∏—á–∏–µ')
    itembtn3 = types.KeyboardButton('/–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_—Ü–µ–Ω—É')
    itembtn4 = types.KeyboardButton('/BOSS_app_–ø—Ä–∞–π—Å')
    itembtn5 = types.KeyboardButton('/–ü–æ–∫–∞–∑–∞—Ç—å_–∑–∞–∫–∞–∑—ã_–∑–∞_—Å–µ–≥–æ–¥–Ω—è')
    itembtn6 = types.KeyboardButton('/–°–¥–µ–ª–∞–π_–º–Ω–µ_—Ö–æ—Ä–æ—à–æ')
    markup.row(itembtn1, itembtn2)
    markup.row(itembtn3, itembtn4)
    markup.row(itembtn5, itembtn6)
    bot.send_message(cid, "–ß—Ç–æ –º–Ω–µ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ç–µ–±—è:", reply_markup=markup)


# help page
@bot.message_handler(commands=['help'])
def command_help(message):
    cid = message.chat.id
    bot.send_chat_action(cid, 'typing')
    help_text = "–Ø –º–æ–≥—É: \n"
    for key in commands:  # generate help text out of the commands dictionary defined at the top
        help_text += "/" + key + ": "
        help_text += commands[key] + "\n"
    bot.send_message(cid, help_text)  # send the generated help page


@bot.message_handler(commands=['–ó–∞–ø—É—Å—Ç–∏—Ç—å_–∞–∫—Ü–∏–∏', 'promo'])
def command_start_promo(message):
    cid = message.chat.id
    user_id = message.json['from']['id']
    user_hash = str(cid) + str(user_id)
    if not authorize_user_action(cid, user_id, 'promo'):
        return

    bot.send_chat_action(cid, 'typing')
    bot.send_message(cid, "_–Ø –∑–∞–ø—É—â—É –∞–∫—Ü–∏–∏ –Ω–∞ –∑–∞—Ä–∞–Ω–µ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —Ç–æ–≤–∞—Ä–æ–≤_", parse_mode='MarkdownV2')
    userState[user_hash]['action'] = 'promo'
    userState[user_hash]['step'] = 1


@bot.message_handler(commands=['–ò–∑–º–µ–Ω–∏—Ç—å_–Ω–∞–ª–∏—á–∏–µ', 'presence'])
def command_set_presence(message):
    cid = message.chat.id
    user_id = message.json['from']['id']
    user_hash = str(cid) + str(user_id)
    if not authorize_user_action(cid, user_id, 'presence'):
        return
    bot.send_chat_action(cid, 'typing')

    one_time_kb = types.ReplyKeyboardMarkup(one_time_keyboard=True)  # create the image selection keyboard
    one_time_kb.add('–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ_–Ω–∞–ª–∏—á–∏–µ')
    one_time_kb.add('–í_–Ω–∞–ª–∏—á–∏–∏')
    one_time_kb.add('–ù–µ—Ç_–≤_–Ω–∞–ª–∏—á–∏–∏')
    one_time_kb.add('–û–∂–∏–¥–∞–µ—Ç—Å—è')

    bot.send_message(cid, "_–Ø —É—Å—Ç–∞–Ω–æ–≤–ª—é –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É_",
                     reply_markup=one_time_kb, parse_mode='MarkdownV2')  # show the keyboard
    userState[user_hash]['action'] = 'presence'
    userState[user_hash]['step'] = 1


@bot.message_handler(func=lambda message: get_user_step(message) == ('presence', 1))
def get_presence_action(message):
    cid = message.chat.id
    user_id = message.json['from']['id']
    user_hash = str(cid) + str(user_id)
    if not authorize_user_action(cid, user_id, 'presence'):
        return

    text = message.text
    bot.send_chat_action(cid, 'typing')

    # markup = types.ForceReply(selective=False)
    # bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ –∞—Ä—Ç–∏–∫—É–ª:", reply_markup=markup)

    if text == '–ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ_–Ω–∞–ª–∏—á–∏–µ':
        userState[user_hash]['user_input'] = ('available', 'true')
        userState[user_hash]['step'] = 2
    elif text == '–í_–Ω–∞–ª–∏—á–∏–∏':
        userState[user_hash]['user_input'] = ('available', 'false')
        userState[user_hash]['step'] = 2
    elif text == '–ù–µ—Ç_–≤_–Ω–∞–ª–∏—á–∏–∏':
        userState[user_hash]['user_input'] = ('not_available', 'false')
        userState[user_hash]['step'] = 2
    elif text == '–û–∂–∏–¥–∞–µ—Ç—Å—è':
        userState[user_hash]['user_input'] = ('waiting', 'false')
        userState[user_hash]['step'] = 2
    else:
        bot.send_message(cid, "*–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é! –õ–∏–±–æ '–°–Ω—è—Ç—å', –ª–∏–±–æ '–í–µ—Ä–Ω—É—Ç—å'*", parse_mode='MarkdownV2')
        # bot.send_message(cid, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        reset_user_state(user_hash)
        markup = types.ReplyKeyboardMarkup()
        itembtn_go = types.KeyboardButton('/start')
        markup.row(itembtn_go)
        bot.send_message(cid, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=markup)
        return

    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ *–∞—Ä—Ç–∏–∫—É–ª*:", reply_markup=hideBoard, parse_mode='MarkdownV2')


@bot.message_handler(func=lambda message: get_user_step(message) == ('presence', 2))
def get_presence_code(message):
    cid = message.chat.id
    user_id = message.json['from']['id']
    user_hash = str(cid) + str(user_id)
    if not authorize_user_action(cid, user_id, 'presence'):
        return

    bot.send_chat_action(cid, 'typing')
    product_code = get_product_code(message.text)
    print('Call Prom functionality for the code ' + product_code)

    bot.send_message(cid, '–ê—Ä—Ç–∏–∫—É–ª "' + product_code + '" –ø—Ä–∏–Ω—è—Ç. –ó–Ω–∞—á–µ–Ω–∏–µ: ' + str(userState[user_hash]['user_input']))
    bot.send_message(cid, '–ù–æ —è –ø–æ–∫–∞ —Ö–∑ —á—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å ü§™')

    reset_user_state(user_hash)


@bot.message_handler(commands=['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å_—Ü–µ–Ω—É', 'price'])
def command_set_new_price(message):
    cid = message.chat.id
    user_id = message.json['from']['id']
    user_hash = str(cid) + str(user_id)
    if not authorize_user_action(cid, user_id, 'price'):
        return

    bot.send_chat_action(cid, 'typing')
    bot.send_message(cid, "_–Ø —É—Å—Ç–∞–Ω–æ–≤–ª—é –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É_", parse_mode='MarkdownV2')

    markup = types.ForceReply(selective=False)
    bot.send_message(message.chat.id, '–£–∫–∞–∂–∏ –Ω–æ–≤—É—é *—Ü–µ–Ω—É* \(–æ–¥–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ\)\.',
                     reply_markup=markup, parse_mode='MarkdownV2')
    userState[user_hash]['action'] = 'price'
    userState[user_hash]['step'] = 1


@bot.message_handler(func=lambda message: get_user_step(message) == ('price', 1))
def get_new_price_action(message):
    cid = message.chat.id
    user_id = message.json['from']['id']
    user_hash = str(cid) + str(user_id)
    if not authorize_user_action(cid, user_id, 'price'):
        return

    text = message.text
    bot.send_chat_action(cid, 'typing')

    pattern = re.compile(r"^\d{2,4}$")

    if pattern.match(text):
        userState[user_hash]['user_input'] = text
        userState[user_hash]['step'] = 2
    else:
        bot.send_message(cid, "*–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ü–µ–Ω—É\.*", parse_mode='MarkdownV2')
        # bot.send_message(cid, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        reset_user_state(user_hash)

        markup = types.ReplyKeyboardMarkup()
        itembtn_go = types.KeyboardButton('/start')
        markup.row(itembtn_go)
        bot.send_message(cid, "–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.", reply_markup=markup)
        return

    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ *–∞—Ä—Ç–∏–∫—É–ª*:", reply_markup=hideBoard, parse_mode='MarkdownV2')


@bot.message_handler(func=lambda message: get_user_step(message) == ('price', 2))
def get_new_price_code(message):
    cid = message.chat.id
    user_id = message.json['from']['id']
    user_hash = str(cid) + str(user_id)
    if not authorize_user_action(cid, user_id, 'price'):
        return

    bot.send_chat_action(cid, 'typing')
    product_code = get_product_code(message.text)
    print('Call Prom functionality ' + product_code)

    bot.send_message(cid, '–ê—Ä—Ç–∏–∫—É–ª "' + product_code + '" –ø—Ä–∏–Ω—è—Ç. –ù–æ–≤–∞—è —Ü–µ–Ω–∞: ' + userState[user_hash]['user_input'])
    bot.send_message(cid, '–ù–æ —è –ø–æ–∫–∞ —Ö–∑ —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å ü§™')

    reset_user_state(user_hash)


@bot.message_handler(commands=['–ü–æ–∫–∞–∑–∞—Ç—å_–∑–∞–∫–∞–∑—ã_–∑–∞_—Å–µ–≥–æ–¥–Ω—è', 'orders'])
def command_show_todays_orders(message):
    cid = message.chat.id
    user_id = message.json['from']['id']
    user_hash = str(cid) + str(user_id)
    if not authorize_user_action(cid, user_id, 'orders'):
        return

    bot.send_chat_action(cid, 'typing')
    time.sleep(2)
    bot.reply_to(message, "–≠—Ç–æ —Å–ª–∏—à–∫–æ–º –∫—Ä—É—Ç–æ –¥–ª—è –º–µ–Ω—è!")


@bot.message_handler(commands=['BOSS_app_–ø—Ä–∞–π—Å', 'bossapp'])
def command_sync_bossapp(message):
    cid = message.chat.id
    user_id = message.json['from']['id']
    user_hash = str(cid) + str(user_id)
    if not authorize_user_action(cid, user_id, 'bossapp'):
        return

    bot.send_chat_action(cid, 'typing')
    time.sleep(2)
    bot.reply_to(message, "–≠—Ç–æ —Å–ª–∏—à–∫–æ–º –∫—Ä—É—Ç–æ –¥–ª—è –º–µ–Ω—è!")
    bot.send_message(message.chat.id, "_–ú–æ–∂–µ—Ç –±—ã—Ç—å, —è –±—É–¥—É —É–º–µ—Ç—å –ø—Ä–æ–≤–µ—Ä—è—Ç—å –Ω–∞–ª–∏—á–∏–µ –≤ Prom, –ø–æ –±—Ä–æ—à–µ–Ω–Ω–æ–º—É –º–Ω–µ PDF "
                                      "–ø—Ä–∞–π—Å—É –∏–∑ Boss\-app_", parse_mode='MarkdownV2')


@bot.message_handler(commands=['–°–¥–µ–ª–∞–π_–º–Ω–µ_—Ö–æ—Ä–æ—à–æ', 'good'])
def command_make_me_good(message):
    cid = message.chat.id
    bot.send_message(cid, "–Ø —É–º–µ—é –¥–µ–ª–∞—Ç—å —Ö–æ—Ä–æ—à–æ...")
    bot.send_chat_action(cid, 'typing')  # show the bot "typing" (max. 5 secs)
    time.sleep(4)
    bot.send_message(cid, "...–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–µ —Ç–µ–±–µ! üòÇü§£üòù")


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    cid = message.chat.id

    markup = types.ReplyKeyboardMarkup()
    itembtn_go = types.KeyboardButton('/start')
    markup.row(itembtn_go)
    bot.send_message(cid, "–ß—Ç–æ –¥–µ–ª–∞–µ–º?", reply_markup=markup)


bot.set_update_listener(listener)  # register listener

bot.polling()
